PROCEDURE gotoHost
     (* gotoHost 7/26/23
     TYPE bookmarks=server,page,title:STRING[144]
     DIM hostname,lineout(4):STRING[144]
     DIM crlf:STRING[2]
     DIM hostaddr(4):INTEGER
     DIM int1,fn1,fn2,soc1,waddr,wbase,wend,wmask,wsize,wptr:INTEGER
     DIM debug:BOOLEAN
     PARAM bookmark:bookmarks
     
     soc1:=$05 \wmask:=$07FF
     POKE $FF69,soc1 \ POKE $FF6A,$1F \int1:=PEEK($FF6B)
     wbase:=(soc1-4)*$0800+$4000
     wend:=wbase+int1
     debug:=FALSE
     crlf=CHR$(13)+CHR$(10)
    
     hostname:=bookmark.server
5    IF debug=TRUE THEN 
       PRINT "Call getdns  : "; bookmark.server
     ENDIF 
     RUN getdns(hostname,hostaddr)
     POKE $FF69,soc1 \ POKE $FF6A,$0C
     FOR fn1=1 TO 4
       IF debug=TRUE THEN PRINT hostaddr(fn1); ".";  \ ENDIF 
       POKE $FF6B,hostaddr(fn1)
     NEXT fn1
     POKE $FF6B,0 \ POKE $FF6B,80
     POKE $FF69,soc1 \ POKE $FF6A,$04 \(* random local port
     POKE $FF6B,$80 \ POKE $FF6B,RND($FF)
     int1:=0
     WHILE int1<>$13 DO 
       POKE $FF69,soc1 \ POKE $FF6A,$01 \ POKE $FF6B,$01 \(* open socket
       POKE $FF69,soc1 \ POKE $FF6A,$03 \int1:=PEEK($FF6B)
       IF debug=TRUE THEN  \ PRINT  \ PRINT USING "'sock stat:',H2",int1; " ";  \ ENDIF 
     ENDWHILE 
     
10   REPEAT 
       POKE $FF69,soc1 \ POKE $FF6A,$01 \ POKE $FF6B,$04
       POKE $FF69,soc1 \ POKE $FF6A,$03 \int1:=PEEK($FF6B)
       IF int1=0 THEN  \(* socket was closed
         PRINT "ERROR: remote server closed connection. "
         PRINT "ENTER to retry" \ INPUT int1
         GOTO 5
       ENDIF 
     UNTIL int1=$17 \(* connected
     lineout(1):="GET /"+bookmark.page+" HTTP/1.1"
     lineout(2):="Host: "+bookmark.server
     lineout(3):="Accept-Language: en"
     lineout(4):=""
     wsize:=LEN(lineout(1))+LEN(lineout(2))+LEN(lineout(3))+6
     IF debug=TRUE THEN 
       PRINT  \ PRINT "socket open"
       FOR fn1=1 TO 4
         PRINT lineout(fn1)
       NEXT fn1
       PRINT "wsize: "; wsize
       INPUT int1
     ENDIF 
100  (* _____ wait until SN_CR has enough room for send
     REPEAT 
       POKE $FF69,soc1 \ POKE $FF6A,$20
       int1:=PEEK($FF6B)*256+PEEK($FF6B)
     UNTIL int1>wsize
     POKE $FF69,soc1 \ POKE $FF6A,$22
     wptr:=PEEK($FF6B)*256+PEEK($FF6B)
     int1:=INT(wptr/256) \int2:=wptr-256*int1
     int3:=INT(wmask/256) \int4:=wmask-256*int3
     int1:=LAND(int1,int3) \int2:=LAND(int2,int4)
     waddr:=int1*256+int2+wbase
     segment:=wsize \(* _____ blast the request
     int1:=INT(waddr/256) \int2:=waddr-256*int1
     POKE $FF69,int1 \ POKE $FF6A,int2
     FOR fn1=1 TO 4
       FOR fn2=1 TO LEN(lineout(fn1))
         int1:=ASC(MID$(lineout(fn1),fn2,1))
         POKE $FF6B,int1
         IF debug=TRUE THEN  \ PRINT CHR$(int1);  \ ENDIF 
       NEXT fn2
       POKE $FF6B,$0D \ POKE $FF6B,$0A
       IF debug=TRUE THEN  \ PRINT  \ ENDIF 
     NEXT fn1
     POKE $FF69,soc1 \ POKE $FF6A,$01 \ POKE $FF6B,$20
     END 
     
     
